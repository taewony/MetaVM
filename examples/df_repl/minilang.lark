// Ignore single-line comments starting with //
COMMENT: /\/\/[^\n]*/
%ignore COMMENT

// Ignore whitespace, tabs, and newlines
%import common.WS
%ignore WS
%import common.NEWLINE
%ignore NEWLINE

?start: stmt+

?stmt: expr                           -> eval_only
     | "print" "(" expr ")"           -> eval_and_print
     | "let" NAME "=" expr            -> let_stmt

?expr: term ((ADD | SUB) term)*       -> expr

?term: factor ((MUL | DIV) factor)*   -> term
?factor: INT | NUMBER          -> number
       | NAME                 -> var
       | STRING               -> string
       | call                 -> func_call   // 함수 호출 추가
       | list                 -> list        // 리스트 추가
       | "(" expr ")"         -> factor

ADD: "+"
SUB: "-"
MUL: "*"
DIV: "/"

// Function call structure: NAME ( [arguments] )
call: NAME "(" [args] ")"

// Arguments list for function calls, comma-separated
args: argument ("," argument)* [","] // Optional trailing comma

// An argument can be a positional expression or a keyword argument
?argument: expr
         | keyword_argument

// Keyword argument: name = expression
keyword_argument: NAME "=" expr

// List literal: [ [expressions] ]
// Allows any expression inside the list
list: "[" [expr ("," expr)*] [","] "]"

// Dictionary literal: { [key=value pairs] }
// Keys are names, values are expressions
dictionary: "{" [key_value_pair ("," key_value_pair)*] [","] "}"
key_value_pair: NAME "=" expr

// Token definitions imported from common Lark library
%import common.INT
%import common.CNAME          -> NAME         // Common Name (identifiers)
%import common.ESCAPED_STRING -> STRING       // String literals ("..." or '...')
%import common.SIGNED_NUMBER  -> NUMBER       // Numbers (integers, floats)

